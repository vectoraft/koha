.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "AppConfig::Args 3pm"
.TH AppConfig::Args 3pm 2015-03-01 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
AppConfig::Args \- Perl5 module for reading command line arguments.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    use AppConfig::Args;
\&
\&    my $state   = AppConfig::State\->new(\e%cfg);
\&    my $cfgargs = AppConfig::Args\->new($state);
\&
\&    $cfgargs\->parse(\e@args);            # read args
.Ve
.SH OVERVIEW
.IX Header "OVERVIEW"
AppConfig::Args is a Perl5 module which reads command line arguments and 
uses the options therein to update variable values in an AppConfig::State 
object.
.PP
AppConfig::File is distributed as part of the AppConfig bundle.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
.SS "USING THE AppConfig::Args MODULE"
.IX Subsection "USING THE AppConfig::Args MODULE"
To import and use the AppConfig::Args module the following line should appear
in your Perl script:
.PP
.Vb 1
\&    use AppConfig::Args;
.Ve
.PP
AppConfig::Args is used automatically if you use the AppConfig module 
and create an AppConfig::Args object through the \fBparse()\fR method.
.PP
AppConfig::File is implemented using object-oriented methods.  A new 
AppConfig::Args object is created and initialised using the \fBnew()\fR method.
This returns a reference to a new AppConfig::File object.  A reference to
an AppConfig::State object should be passed in as the first parameter:
.PP
.Vb 2
\&    my $state   = AppConfig::State\->new();
\&    my $cfgargs = AppConfig::Args\->new($state);
.Ve
.PP
This will create and return a reference to a new AppConfig::Args object.
.SS "PARSING COMMAND LINE ARGUMENTS"
.IX Subsection "PARSING COMMAND LINE ARGUMENTS"
The \f(CWparse()\fR method is used to read a list of command line arguments and 
update the STATE accordingly.  A reference to the list of arguments should
be passed in.
.PP
.Vb 1
\&    $cfgargs\->parse(\e@ARGV);
.Ve
.PP
If the method is called without a reference to an argument list then it
will examine and manipulate \f(CW@ARGV\fR.
.PP
If the PEDANTIC option is turned off in the AppConfig::State object, any 
parsing errors (invalid variables, unvalidated values, etc) will generate
warnings, but not cause the method to return.  Having processed all
arguments, the method will return 1 if processed without warning or 0 if
one or more warnings were raised.  When the PEDANTIC option is turned on,
the method generates a warning and immediately returns a value of 0 as soon
as it encounters any parsing error.
.PP
The method continues parsing arguments until it detects the first one that
does not start with a leading dash, '\-'.  Arguments that constitute values
for other options are not examined in this way.
.SH "FUTURE DEVELOPMENT"
.IX Header "FUTURE DEVELOPMENT"
This module was developed to provide backwards compatibility (to some 
degree) with the preceeding App::Config module.  The argument parsing 
it provides is basic but offers a quick and efficient solution for those
times when simple option handling is all that is required.
.PP
If you require more flexibility in parsing command line arguments, then 
you should consider using the AppConfig::Getopt module.  This is loaded 
and used automatically by calling the AppConfig \fBgetopt()\fR method.
.PP
The AppConfig::Getopt module provides considerably extended functionality 
over the AppConfig::Args module by delegating out the task of argument 
parsing to Johan Vromans' Getopt::Long module.  For advanced command-line 
parsing, this module (either Getopt::Long by itself, or in conjunction with 
AppConfig::Getopt) is highly recommended.
.SH AUTHOR
.IX Header "AUTHOR"
Andy Wardley, <abw@wardley.org>
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright (C) 1997\-2007 Andy Wardley.  All Rights Reserved.
.PP
Copyright (C) 1997,1998 Canon Research Centre Europe Ltd.
.PP
This module is free software; you can redistribute it and/or modify it 
under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
AppConfig, AppConfig::State, AppConfig::Getopt, Getopt::Long
